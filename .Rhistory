Pbl_1 <- D1/L                      # Permeability of BL (m/h)
Pm1 <- Pm * 60 * 60                # Permeability of membrane (m/h)
Papp1 <- (1/(1/Pm1 + 1/Pbl_1))       # Papp (in m/h)
return(list(Papp1=Papp1, Conc_AH=Conc_AH, Pm=Pm, Pbl=Pbl, Pm_Pbl_ratio=Pm_Pbl_ratio))
}
##################################################################################################
# Variables
u1 <- c(0.72, 0.74, 0.71, 0.51)                 # Mean measured growth rate of R. subcapitata (d-1) (This study)
u1 <- u1 / 24                                    # Mean measured growth rate of R. subcapitata (h-1) (This study)
Ri <- c(1.92,1.93,1.93,1.92)                         # Mean measured initial cell radius of R. subcapitata (um) (This study)
Ri <- Ri * 1E-06
Rf <- c(2.02,2.05,2.21,2.33)                                   # Mean measured FINAL cell radius of R. subcapitata (um) (This study)
Rf <- Rf * 1E-06
frac <- c(frac, frac, frac, frac)                   # Mean measured initial volume fraction of algae in the medium (m^3 algae / m^3 medium) (This study)
# Calculations of cell permeability and protonated fomesafen fraction
Papp_R <- rbind(Fomesa(pH=pH, pKa=pKa, R=Ri)$Papp1, Fomesa(pH=pH, pKa=pKa, R=Rf)$Papp1)   # Cellular permeability considering a low cell radius (1st row) or a high cell radius (2sd row)
Conc_AH <- Fomesa(pH=pH, pKa=pKa, R=Ri)$Conc_AH                     # Does not change with cell radius
assert(u1 & Ri & Rf & frac & as.vector(Papp_R) & Conc_AH > 0) # Papp_R & Conc_AH > 0)                 # Make sure all variables are positive (no sign errors)
cat("Calculated membrane permeability (Pm) in m/h at low or high cell radius : ", Fomesa(pH=pH, pKa=pKa, R=Ri)$Pm, fill=T) # Equal at low or high cell radius
cat("Ratio of membrane permeability to boundary layer permeability at low cell radius:", Fomesa(pH=pH, pKa=pKa, R=Ri)$Pm_Pbl_ratio, fill=T)
cat("Ratio of membrane permeability to boundary layer permeability at high cell radius:", Fomesa(pH=pH, pKa=pKa, R=Rf)$Pm_Pbl_ratio, fill=T)
##############################################################################################################
# Solving the differential equations expressing the rate of change of cellular fmesafen over time
#############################################################################################################
t <- 72
dt <- 0.05
i <- 0
out <- matrix(, nrow = t/dt+1, ncol = 0)
out_loss <- out
outnew <- matrix(, nrow = t/dt+1, ncol = 0)
outnew_loss <- outnew
for (i in 1:2) {
# Differential equation expressing the rate of change of cellular fomesafen concentration (dy, units = mol / m^3)
# function using low cell radius (i = 1) and high cell radius (i = 2)
cell_fomesafen <- function(t, y, parms) {
dy <- (Papp_R[i,] * (Conc_AH - (y * ( frac * exp(1)^(u1 * t)) ) ) ) - (u1 * y)  # Considering depletion of Conc_AH in the medium
#dy <- (Papp_Ri * Conc_AH) - (u1 * y)  # Without considering depletion of Conc_AH in the medium
#dy <- (Papp_Ri * (Conc_AH - (y * ( frac * exp(1)^(u1 * t)) ) ) ) - (u1 * y)  - (Papp_Ri * y) # considering depletion and passive excretion
list(dy)
}
# Differential equation taking into account passive fomesafen excretion
cell_fomesafen_loss <- function(t, y, parms) {
dy <- (Papp_R[i,] * (Conc_AH - (y * ( frac * exp(1)^(u1 * t)) ) ) ) - (u1 * y)  - (Papp_R[i,] * y) # considering depletion and passive excretion
list(dy)
}
# Solving dynamically the cellular fomesafen concentration as a function of 4 external fomesafen concentrations
yini <- c(0,0,0,0)  # initial dissolved fomesafen concentration
times <- seq(from = 0, to = t, by = dt)
outnew <- ode (times = times, y = yini, func = cell_fomesafen)
outnew_loss <- ode (times = times, y = yini, func = cell_fomesafen_loss)
out <- cbind(out, outnew)  # Matrix : in rows = time points; in columns : 1: elapsed time, 2: 5 ug/L, 3: 10 ug/L, 4: 40 ug/L, 5: 320 ug/L.
out_loss <- cbind(out_loss, outnew_loss)
}
##########################################################################################################################
head(out)
tail(out)
72/0.05
###########################################################################################################################
plot_res <- function(out) {
old.par <- par()
mf <- par(mfrow = c(2, 2))
matplot(out[,1], out[,2], xaxt="n", xlim=c(0,max(times)), ylim=c(0,max(out[,2])*1.2), type="l", xlab="Time (h)", ylab="Cell concentration (mol/m^3)")
axis(1,at=c(0,10,20,30,40,50,60,70))
lines(out[,1], out[,7], xlim=c(0,times[length(times)]), lty = 2, ylim=c(0, max(out[,2]*1.2)), xlab=c("Time (h)","Time (h)","Time (h)", "Time (h)"), ylab="cell concentration (mol/m^3)")
text(5, max(out[,2])*1.1, "A", cex=1.5)
matplot(out[,1], out[,3], xaxt="n", xlim=c(0,max(times)), ylim=c(0,max(out[,3])*1.2), type="l", xlab="Time (h)", ylab="Cell concentration (mol/m^3)")
lines(out[,1], out[,8], xlim=c(0,times[length(times)]), lty = 2, ylim=c(0, max(out[,3]*1.2)), xlab=c("Time (h)","Time (h)","Time (h)", "Time (h)"), ylab="cell concentration (mol/m^3)")
axis(1,at=c(0,10,20,30,40,50,60,70))
text(5, max(out[,3]*1.1), "B", cex=1.5)
matplot(out[,1], out[,4], xaxt="n", xlim=c(0,max(times)), ylim=c(0,max(out[,4])*1.2), type="l", xlab="Time (h)", ylab="Cell concentration (mol/m^3)")
lines(out[,1], out[,9], xlim=c(0,times[length(times)]), lty = 2, ylim=c(0, max(out[,4]*1.2)), xlab=c("Time (h)","Time (h)","Time (h)", "Time (h)"), ylab="cell concentration (mol/m^3)")
axis(1,at=c(0,10,20,30,40,50,60,70))
text(5, max(out[,4])*1.1, "C", cex=1.5)
matplot(out[,1], out[,5], xaxt="n", xlim=c(0,max(times)), ylim=c(0,max(out[,5])*1.2), type="l", xlab="Time (h)", ylab="Cell concentration (mol/m^3)")
lines(out[,1], out[,10], xlim=c(0,times[length(times)]), lty = 2, ylim=c(0, max(out[,5]*1.2)), xlab=c("Time (h)","Time (h)","Time (h)", "Time (h)"), ylab="cell concentration (mol/m^3)")
axis(1,at=c(0,10,20,30,40,50,60,70))
text(5, max(out[,5])*1.1, "D", cex=1.5)
par(mf)
old.par
}
###########################################################################################################################
###########################################################################################################################
# Plot the results for the case when fomesafen efflux is neglected : 5, 10, 40, 320 ug/L fomesafen
plot_res(out)
# Plot the results when fomesafen passive efflux is considered : 5, 10, 40, 320 ug/L fomesafen
plot_res(out_loss)
source('~/Documents/R_software/R_scripts/fomesafen2.R')
source('~/Documents/R_software/R_scripts/fomesafen2.R')
source('~/Documents/R_software/R_scripts/fomesafen2.R')
source('~/Documents/R_software/R_scripts/fomesafen2.R')
t/dt
0.001*60
0.06*60
t <- 72           # exposure time (in hours)
dt <- 0.001       # time step for numerical integration (in h)
cat("Number of time steps : ", 72/0.001)
cat("time step (in sec) : ", dt/60/60)
cat("time step (in sec) : ", dt*60*60)
cat("time step (in sec) : ", dt*60*60, fill=T)
cat("Number of time steps : ", 72/0.001, fill=T)
library(rbenchmark)
library(microbenchmark)
set.seed(2017)
n <- 10000
p <- 100
X <- matrix(rnorm(n*p), n, p)
y <- X %*% rnorm(p) + rnorm(100)
check_for_equal_coefs <- function(values) {
tol <- 1e-12
max_error <- max(c(abs(values[[1]] - values[[2]]),
abs(values[[2]] - values[[3]]),
abs(values[[1]] - values[[3]])))
max_error < tol
}
mbm <- microbenchmark("lm" = { b <- lm(y ~ X + 0)$coef },
"pseudoinverse" = {
b <- solve(t(X) %*% X) %*% t(X) %*% y
},
"linear system" = {
b <- solve(t(X) %*% X, t(X) %*% y)
},
check = check_for_equal_coefs)
mbm
r <- rep(1,10)
r
r <- seq(1,10,1)
r
t <- 100
r <- seq(1,10,1)
for (i in 1:1000) {
z <- t * r
}
t <- 100
r <- seq(1,10,1)
for (i in 1:1000000) {
z <- t * r
}
r <- seq(1,10,1)
for (i in 1:1E+08) {
z <- t * r
}
for (i in 1:1E+07) {
z <- t * r
}
mbm <- microbenchmark(
t <- 100
r <- seq(1,10,1)
for (i in 1:1E+07) {
z <- t * r
}
)
mbm <- system.time(
t <- 100
r <- seq(1,10,1)
for (i in 1:1E+07) {
z <- t * r
}
)
mbm <- system.time(
t <- 100
r <- seq(1,10,1)
for (i in 1:1E+07) {
z <- t * r
}
)
system.time(2+2)
mbm <- system.time(
t <- 100
r <- seq(1,10,1)
for (i in 1:1E+07) {
z <- t * r
})
system.time(2+2)
mbm <- system.time(
t <- 100
r <- seq(1,10,1)
for (i in 1:1E+07) {
z <- t * r
})
source('~/Documents/R_software/R_scripts/fomesafen2.R')
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
# Stop the clock
proc.time() - ptm
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
system.time(replicate(1000, t * r))
mbm <- system.time(
t <- 100
r <- seq(1,10,1)
for (i in 1:1E+07) {
z <- t * r
})
system.time(replicate(1000, t * r))
system.time(replicate(1000, r))
set.seed(21)
mbm <- microbenchmark(
t <- 100
r <- seq(1,10,1)
for (i in 1:1E+07) {
z <- t * r
}, check=my_check)
mbm <- microbenchmark(
(t <- 100
r <- seq(1,10,1)
for (i in 1:1E+07) {
z <- t * r
})
, check=my_check)
require(stats)
# }
# NOT RUN {
system.time(for(i in 1:100) mad(runif(1000)))
# }
# NOT RUN {
exT <- function(n = 10000) {
# Purpose: Test if system.time works ok;   n: loop size
system.time(for(i in 1:n) x <- mean(rt(1000, df = 4)))
}
#-- Try to interrupt one of the following (using Ctrl-C / Escape):
exT()                 #- about 4 secs on a 2.5GHz Xeon
t <- 72           # exposure time (in hours)
dt <- 0.0001       # time step for numerical integration (in h)
cat("time step (in sec) : ", dt*60*60, fill=T)
cat("Number of time steps : ", 72/0.001, fill=T)
t <- 72           # exposure time (in hours)
dt <- 0.00001       # time step for numerical integration (in h)
cat("time step (in sec) : ", dt*60*60, fill=T)
cat("Number of time steps : ", 72/0.001, fill=T)
cat("Number of time steps : ", t/dt, fill=T)
t <- 72           # exposure time (in hours)
dt <- 0.0001       # time step for numerical integration (in h)
cat("time step (in sec) : ", dt*60*60, fill=T)
cat("Number of time steps : ", t/dt, fill=T)
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
t <- 72           # exposure time (in hours)
dt <- 0.001       # time step for numerical integration (in h)
cat("time step (in sec) : ", dt*60*60, fill=T)
cat("Number of time steps : ", t/dt, fill=T)
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
# Stop the clock and print elapsed time
cat("Elapsed time is : ", proc.time() - start_time)
timee <- proc.time() - start_time
proc.time() - start_time
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
time3 <- proc.time() - start_time
time3[1]
# Stop the clock and print elapsed time
cat("Elapsed time or wall clock time is : ", (proc.time() - start_time)[1])
# Stop the clock and print elapsed time
cat("Elapsed time or wall clock time is : ", (proc.time() - start_time)[1])
# Stop the clock and print elapsed time
cat("Elapsed time or wall clock time is : ", (proc.time() - start_time)[1])
# Stop the clock and print elapsed time
proc.time() - start_time
cat("Elapsed time or wall clock time is : ", (proc.time() - start_time)[1])
# Stop the clock and print elapsed time
cat("Elapsed time or wall clock time is : ", (proc.time() - start_time)[1])
# Stop the clock and print elapsed time
cat("Elapsed time or wall clock time is : ", (proc.time() - start_time)[1])
# Stop the clock and print elapsed time
wall_time <- proc.time() - start_time)
# Stop the clock and print elapsed time
wall_time <- proc.time() - start_time
mean(wall_time)
proc.time()
proc.time()[1]
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
proc.time()[1]
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
wall_time
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
sd(wall_time)
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
0.5/4.5
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
dim(out)
dim(out)
dim(out)
###########################################################################################################################
# Plot the results for the case when fomesafen efflux is neglected : 5, 10, 40, 320 ug/L fomesafen
pdf('out.pdf')
plot_res(out)
dev.off
# Plot the results when fomesafen passive efflux is considered : 5, 10, 40, 320 ug/L fomesafen
png('out.png')
plot_res(out_loss)
dev.off
# Plot the results when fomesafen passive efflux is considered : 5, 10, 40, 320 ug/L fomesafen
tiff('out_loss.tiff')
plot_res(out_loss)
dev.off
plot_res(out)
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
###########################################################################################################################
# Plot the results for the case when fomesafen efflux is neglected : 5, 10, 40, 320 ug/L fomesafen
tiff('out.tiff')
plot_res(out)
dev.off
# Plot the results when fomesafen passive efflux is considered : 5, 10, 40, 320 ug/L fomesafen
tiff('out.tiff')
plot_res(out_loss)
dev.off
# Plot the results when fomesafen passive efflux is considered : 5, 10, 40, 320 ug/L fomesafen
tiff('out_loss2.tiff')
plot_res(out_loss)
dev.off
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
head(out)
dim(out)
dim(out_loss)
###########################################################################################################################
# Function to plot the results in 4 panels (1: 5 ug/L, 2: 10 ug/L; 3: 40 ug/L; 4: 320 ug/L)
###########################################################################################################################
plot_res <- function(out) {
old.par <- par()
tiff('out.tiff')
mf <- par(mfrow = c(2, 2))
matplot(out[,1], out[,2], xaxt="n", xlim=c(0,max(times)), ylim=c(0,max(out[,2])*1.2), type="l", xlab="Time (h)", ylab="Cell concentration (mol/m^3)")
axis(1,at=c(0,10,20,30,40,50,60,70))
lines(out[,1], out[,7], xlim=c(0,times[length(times)]), lty = 2, ylim=c(0, max(out[,2]*1.2)), xlab=c("Time (h)","Time (h)","Time (h)", "Time (h)"), ylab="cell concentration (mol/m^3)")
text(5, max(out[,2])*1.1, "A", cex=1.5)
matplot(out[,1], out[,3], xaxt="n", xlim=c(0,max(times)), ylim=c(0,max(out[,3])*1.2), type="l", xlab="Time (h)", ylab="Cell concentration (mol/m^3)")
lines(out[,1], out[,8], xlim=c(0,times[length(times)]), lty = 2, ylim=c(0, max(out[,3]*1.2)), xlab=c("Time (h)","Time (h)","Time (h)", "Time (h)"), ylab="cell concentration (mol/m^3)")
axis(1,at=c(0,10,20,30,40,50,60,70))
text(5, max(out[,3]*1.1), "B", cex=1.5)
matplot(out[,1], out[,4], xaxt="n", xlim=c(0,max(times)), ylim=c(0,max(out[,4])*1.2), type="l", xlab="Time (h)", ylab="Cell concentration (mol/m^3)")
lines(out[,1], out[,9], xlim=c(0,times[length(times)]), lty = 2, ylim=c(0, max(out[,4]*1.2)), xlab=c("Time (h)","Time (h)","Time (h)", "Time (h)"), ylab="cell concentration (mol/m^3)")
axis(1,at=c(0,10,20,30,40,50,60,70))
text(5, max(out[,4])*1.1, "C", cex=1.5)
matplot(out[,1], out[,5], xaxt="n", xlim=c(0,max(times)), ylim=c(0,max(out[,5])*1.2), type="l", xlab="Time (h)", ylab="Cell concentration (mol/m^3)")
lines(out[,1], out[,10], xlim=c(0,times[length(times)]), lty = 2, ylim=c(0, max(out[,5]*1.2)), xlab=c("Time (h)","Time (h)","Time (h)", "Time (h)"), ylab="cell concentration (mol/m^3)")
axis(1,at=c(0,10,20,30,40,50,60,70))
text(5, max(out[,5])*1.1, "D", cex=1.5)
par(mf)
old.par
}
plot_res(out)
dev.off
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
###########################################################################################################################
# Plot the results for the case when fomesafen efflux is neglected : 5, 10, 40, 320 ug/L fomesafen
#tiff('out.tiff')
plot_res(out_loss)
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
t <- 72           # exposure time (in hours)
dt <- 0.01       # time step for numerical integration (in h)
cat("time step (in sec) : ", dt*60*60, fill=T)
cat("Number of time steps : ", t/dt, fill=T)
source('~/Documents/R_software/R_scripts/fomesafen2.R', echo=TRUE)
source('~/Documents/R_software/R_scripts/fomesafen2.R')
source('~/Documents/R_software/R_scripts/fomesafen2.R')
source('~/Documents/R_software/R_scripts/fomesafen2.R')
t <- 72           # exposure time (in hours)
dt <- 0.001       # time step for numerical integration (in h)
cat("time step (in sec) : ", dt*60*60, fill=T)
cat("Number of time steps : ", t/dt, fill=T)
source('~/Documents/R_software/R_scripts/fomesafen2.R')
t <- 72           # exposure time (in hours)
dt <- 0.0001       # time step for numerical integration (in h)
cat("time step (in sec) : ", dt*60*60, fill=T)
cat("Number of time steps : ", t/dt, fill=T)
source('~/Documents/R_software/R_scripts/fomesafen2.R')
t <- 72           # exposure time (in hours)
dt <- 0.0003       # time step for numerical integration (in h)
cat("time step (in sec) : ", dt*60*60, fill=T)
cat("Number of time steps : ", t/dt, fill=T)
source('~/Documents/R_software/R_scripts/fomesafen2.R')
system.time(plot_res <- function(out) {
old.par <- par()
mf <- par(mfrow = c(2, 2))
matplot(out[,1], out[,2], xaxt="n", xlim=c(0,max(times)), ylim=c(0,max(out[,2])*1.2), type="l", xlab="Time (h)", ylab="Cell concentration (mol/m^3)")
axis(1,at=c(0,10,20,30,40,50,60,70))
lines(out[,1], out[,7], xlim=c(0,times[length(times)]), lty = 2, ylim=c(0, max(out[,2]*1.2)), xlab=c("Time (h)","Time (h)","Time (h)", "Time (h)"), ylab="cell concentration (mol/m^3)")
text(5, max(out[,2])*1.1, "A", cex=1.5)
matplot(out[,1], out[,3], xaxt="n", xlim=c(0,max(times)), ylim=c(0,max(out[,3])*1.2), type="l", xlab="Time (h)", ylab="Cell concentration (mol/m^3)")
lines(out[,1], out[,8], xlim=c(0,times[length(times)]), lty = 2, ylim=c(0, max(out[,3]*1.2)), xlab=c("Time (h)","Time (h)","Time (h)", "Time (h)"), ylab="cell concentration (mol/m^3)")
axis(1,at=c(0,10,20,30,40,50,60,70))
text(5, max(out[,3]*1.1), "B", cex=1.5)
matplot(out[,1], out[,4], xaxt="n", xlim=c(0,max(times)), ylim=c(0,max(out[,4])*1.2), type="l", xlab="Time (h)", ylab="Cell concentration (mol/m^3)")
lines(out[,1], out[,9], xlim=c(0,times[length(times)]), lty = 2, ylim=c(0, max(out[,4]*1.2)), xlab=c("Time (h)","Time (h)","Time (h)", "Time (h)"), ylab="cell concentration (mol/m^3)")
axis(1,at=c(0,10,20,30,40,50,60,70))
text(5, max(out[,4])*1.1, "C", cex=1.5)
matplot(out[,1], out[,5], xaxt="n", xlim=c(0,max(times)), ylim=c(0,max(out[,5])*1.2), type="l", xlab="Time (h)", ylab="Cell concentration (mol/m^3)")
lines(out[,1], out[,10], xlim=c(0,times[length(times)]), lty = 2, ylim=c(0, max(out[,5]*1.2)), xlab=c("Time (h)","Time (h)","Time (h)", "Time (h)"), ylab="cell concentration (mol/m^3)")
axis(1,at=c(0,10,20,30,40,50,60,70))
text(5, max(out[,5])*1.1, "D", cex=1.5)
par(mf)
old.par
})
###########################################################################################################################
# Function to plot the results in 4 panels (1: 5 ug/L, 2: 10 ug/L; 3: 40 ug/L; 4: 320 ug/L)
###########################################################################################################################
system.time(plot_res <- function(out) {
old.par <- par()
mf <- par(mfrow = c(2, 2))
matplot(out[,1], out[,2], xaxt="n", xlim=c(0,max(times)), ylim=c(0,max(out[,2])*1.2), type="l", xlab="Time (h)", ylab="Cell concentration (mol/m^3)")
axis(1,at=c(0,10,20,30,40,50,60,70))
lines(out[,1], out[,7], xlim=c(0,times[length(times)]), lty = 2, ylim=c(0, max(out[,2]*1.2)), xlab=c("Time (h)","Time (h)","Time (h)", "Time (h)"), ylab="cell concentration (mol/m^3)")
text(5, max(out[,2])*1.1, "A", cex=1.5)
matplot(out[,1], out[,3], xaxt="n", xlim=c(0,max(times)), ylim=c(0,max(out[,3])*1.2), type="l", xlab="Time (h)", ylab="Cell concentration (mol/m^3)")
lines(out[,1], out[,8], xlim=c(0,times[length(times)]), lty = 2, ylim=c(0, max(out[,3]*1.2)), xlab=c("Time (h)","Time (h)","Time (h)", "Time (h)"), ylab="cell concentration (mol/m^3)")
axis(1,at=c(0,10,20,30,40,50,60,70))
text(5, max(out[,3]*1.1), "B", cex=1.5)
matplot(out[,1], out[,4], xaxt="n", xlim=c(0,max(times)), ylim=c(0,max(out[,4])*1.2), type="l", xlab="Time (h)", ylab="Cell concentration (mol/m^3)")
lines(out[,1], out[,9], xlim=c(0,times[length(times)]), lty = 2, ylim=c(0, max(out[,4]*1.2)), xlab=c("Time (h)","Time (h)","Time (h)", "Time (h)"), ylab="cell concentration (mol/m^3)")
axis(1,at=c(0,10,20,30,40,50,60,70))
text(5, max(out[,4])*1.1, "C", cex=1.5)
matplot(out[,1], out[,5], xaxt="n", xlim=c(0,max(times)), ylim=c(0,max(out[,5])*1.2), type="l", xlab="Time (h)", ylab="Cell concentration (mol/m^3)")
lines(out[,1], out[,10], xlim=c(0,times[length(times)]), lty = 2, ylim=c(0, max(out[,5]*1.2)), xlab=c("Time (h)","Time (h)","Time (h)", "Time (h)"), ylab="cell concentration (mol/m^3)")
axis(1,at=c(0,10,20,30,40,50,60,70))
text(5, max(out[,5])*1.1, "D", cex=1.5)
par(mf)
old.par
})
system.time(plot_res(out))
source('~/Documents/R_software/R_scripts/fomesafen2.R')
source('~/Documents/R_software/R_scripts/fomesafen2.R')
start_time <- numeric(nb) # initialize the vector of start time for code profiling
# Start the clock to time the code
nb <- 10                  # number of time the code is timed
start_time <- numeric(nb) # initialize the vector of start time for code profiling
start_time
source('~/Documents/R_software/R_scripts/fomesafen2.R')
source('~/Documents/R_software/R_scripts/fomesafen2.R')
setwd("~/Documents/R_software/R_scripts/Fomesafen")
source('~/Documents/R_software/R_scripts/Fomesafen/mainFomesafen.R')
cat("Number of time the code was executed : ", nb, '\n')
nb <- 2                  # number of time the code is timed
cat("Number of time the code was executed : ", nb, '\n')
source('~/Documents/R_software/R_scripts/Fomesafen/fomesafenTime.R')
source('~/Documents/R_software/R_scripts/Fomesafen/fomesafenTime.R')
source('~/Documents/R_software/R_scripts/Fomesafen/pkgTest.R')
pkgTest(2)
source('~/Documents/R_software/R_scripts/Fomesafen/pkgTest.R')
pkgTest(2)
pkgTest("33")
pkgTest()
pkgTest(0)
pkgTest(x=NULL)
source('~/Documents/R_software/R_scripts/Fomesafen/pkgTest.R')
pkgTest()
pkgTest(x=NULL)
source('~/Documents/R_software/R_scripts/Fomesafen/pkgTest.R')
pkgTest(x=NULL)
source('~/Documents/R_software/R_scripts/Fomesafen/permeability.R')
permeability(pH=6, pKa=3, R=2E-06)
ode()
ode
source('~/Documents/R_software/R_scripts/Fomesafen/permeability.R')
permeability(pH=6, pKa=3, R=2E-06)
source('~/Documents/R_software/R_scripts/Fomesafen/permeability.R')
permeability(pH=6, pKa=3, R=2E-06)
source('~/Documents/R_software/R_scripts/Fomesafen/permeability.R')
permeability(pH=6, pKa=3, R=2E-06)
permeability(pH=6, R=2E-06)
permeability(pH=6, pKa=NULL, R=2E-06)
source('~/Documents/R_software/R_scripts/Fomesafen/permeability.R')
permeability(pH=6, pKa=-1, R=2E-06)
permeability(pH=6, pKa=4, R=2E-06)
class(out)
dim(out)
dim(out,2)
dim(2,out)
dim(out)[2]
if( !is.matrix(out) || !dim(out)[2] == 10 )
stop("The function argument should be a matrix")
testouti <- matrix(1:3)
testouti
source('~/Documents/R_software/R_scripts/Fomesafen/plotRes.R')
plotRes(testouti)
class(testouti)
source('~/Documents/R_software/R_scripts/Fomesafen/maxPeak.R')
###########################################################################################################################
# Printing a data frame summarizing the results : maximum fomesafen concentration and time needed to reach maximum for both set of plots assuming low or high cell radius.
# Case 1 : Without fomesafen efflux
# Case 2: With fomesafen efflux
outlist <- list(out, out_loss)
map(outlist, maxPeak) # Calling the function "max_Peak"
names(outlist) <- c("Case 1", "Case 2")
map(outlist, maxPeak) # Calling the function "max_Peak"
source('~/Documents/R_software/R_scripts/Fomesafen/mainFomesafen.R')
source('~/Documents/R_software/R_scripts/Fomesafen/mainFomesafen.R')
source('~/Documents/R_software/R_scripts/Fomesafen/fomesafenTime.R')
cat("Mean elapsed time or wall clock time is : ", mean(user_time), "s", '\n')
cat("SD of elapsed time (s) or wall clock time is : ", sd(user_time), "s", '\n')
cat("Number of time the code was executed : ", nb, '\n')
cat("Mean elapsed time is : ", mean(user_time), "s", '\n')
cat("Standard deviation of elapsed time is : ", sd(user_time), "s", '\n')
install.packages("profvis")
library("profvis")
profvis({
source(paste0(getwd(),"/mainFomesafen.R")) })
source('~/Documents/R_software/R_scripts/Fomesafen/mainFomesafen.R', echo=TRUE)
library("profvis")
profvis({
source(paste0(getwd(),"/mainFomesafen.R"), echo=TRUE) })
source('~/Documents/R_software/R_scripts/Fomesafen/mainFomesafen.R', echo=TRUE)
install.packages("profvis")
library("profvis")
source('~/Documents/R_software/R_scripts/Fomesafen/mainFomesafen.R', echo=TRUE)
